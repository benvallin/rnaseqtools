% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_pseudobulk.R
\name{compute_pseudobulk}
\alias{compute_pseudobulk}
\title{Compute pseudobulk profiles}
\usage{
compute_pseudobulk(
  input,
  cell_metadata,
  cell_var,
  group_vars,
  discard_not_expressed = TRUE,
  parallel = TRUE,
  skip_table_checks = FALSE
)
}
\arguments{
\item{input}{data.frame or tibble with character / factor column <cell_var> and numeric columns representing feature-specific counts.}

\item{cell_metadata}{data.frame or tibble with character / factor columns <cell_var> and <group_vars>.}

\item{cell_var}{character vector of length 1 or name representing cell ID. Must be a column name of input and cell_metadata.}

\item{group_vars}{character vector or vector of names representing grouping variables for pseudobulking. Must be column name(s) of cell_metadata.}

\item{discard_not_expressed}{logical vector of length 1 indicating if features with 0 counts for all the pseudobulks should be discarded.}

\item{parallel}{logical vector of length 1 indicating if parallelisation should be enabled. If TRUE, use n detected cores - 1. Not implemented for windows.}

\item{skip_table_checks}{logical vector of length 1 indicating if format checking of input / cell_metadata should be skipped. If TRUE, malformed tables won't be detected but can greatly improve speed.}
}
\value{
a tibble with pseudobulk profiles defined by <group_vars>. Pseudobulks are produced by summing the feature counts for all cells in a group.
}
\description{
Compute pseudobulk profiles
}
\examples{
# Convert raw count matrix to tibble with gene IDs as column
sc_cnt_df <- tibble::as_tibble(x = sc_cnt_ex,
                               rownames = "ensembl_gene_id")

# Transpose raw count tibble with barcode as column
sc_cnt_df <- transpose_cnt_df(input = sc_cnt_df,
                              gene_id = "ensembl_gene_id",
                              sample_id = "barcode")

# Compute pseudobulk profiles for donor IDs
pseudobulks <- compute_pseudobulk(input = sc_cnt_df,
                                  cell_metadata = sc_sample_metadata_ex,
                                  cell_var = barcode,
                                  group_vars = donor_id,
                                  parallel = FALSE)

}
